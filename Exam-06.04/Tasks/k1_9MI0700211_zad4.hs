main :: IO()
main = do
    print $ pointsForCard ([41,48,83,86,17], [83,86,6,31,17,9,48,53])
    print $ totalPoints [([41,48,83,86,17],[83,86,6,31,17,9,48,53]),([13,32,20,16,61],[61,30,68,82,17,32,24,19]),([1,21,53,59,44],[69,82,63,72,16,21,14,1]),([41,92,73,84,69],[59,84,76,51,58,5,54,83]),([87,83,26,28,32],[88,30,70,12,93,22,82,36]),([31,18,13,56,72],[74,77,10,23,35,67,36,11])]
    print $ totalPoints [([11,54,66,33,51,59,82,24,3,88],[70,28,24,89,66,42,22,59,88,33,99,54,31,11,39,3,51,82,38,16,68]),([26,7,38,74,20,89,78,79,73,47],[88,64,13,18,99,9,37,61,60,97,22,67,48,95,19,76,40,31,6,90,42,2,41,1,68]),([67,65,8,4,84,62,69,66,46,36],[27,30,2,16,45,99,65,50,37,19,78,87,49,64,12,84,11,8,4,69,44,62,48,71,17])]
    print $ totalPoints [([92,89,2,29,25,53,65,30,38,71],[11,53,6,63,15,50,41,37,27,96,73,57,64,85,59,1,22,49,25,52,29,80,72,58,28]),([36,66,57,82,10,1,28,25,56,83],[23,58,38,35,97,66,55,14,85,79,54,77,93,62,67,4,11,99,94,90,32,22,12,36,63]),([61,19,76,17,81,18,87,44,45,74],[37,15,31,67,24,4,77,81,63,68,27,94,3,62,12,90,69,2,8,34,60,53,97,43,73]),([61,97,73,13,88,93,19,75,47,89],[68,79,15,25,59,16,78,5,40,69,92,20,4,58,22,30,67,21,76,44,81,98,65,74,46]),([3,45,59,47,12,65,8,57,98,53],[77,96,12,8,22,63,59,88,61,43,66,39,90,45,55,47,10,73,53,34,25,3,6,99,38])]

nthPowerTwo :: Int -> Int
nthPowerTwo n 
    | n < 0 = 0
    | otherwise = 2 ^ n

pointsForCard :: ([Int], [Int]) -> Int
pointsForCard (points, winings) =
    nthPowerTwo (foldr (\p acc -> if p `elem` winings then acc + 1 else acc) 0 points - 1)

totalPoints :: [([Int],[Int])] -> Int
totalPoints xs = helper 0 xs
    where
        helper res [] = res
        helper res (x:xs) = helper (res + pointsForCard x) xs